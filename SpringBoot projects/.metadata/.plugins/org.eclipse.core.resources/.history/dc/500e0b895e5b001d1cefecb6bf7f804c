package com.te.springboot.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.te.springboot.dao.EmployeeDao;
import com.te.springboot.dto.EmployeeDto;
import com.te.springboot.dto.LoginDto;
import com.te.springboot.entity.EmployeeEducationalInfo;
import com.te.springboot.entity.EmployeePrimaryInfo;
import com.te.springboot.entity.EmployeeSecondaryInfo;
import com.te.springboot.entity.EmployeeSkills;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class EmployeeServiceImpl implements EmployeeService {

	@Autowired
	private EmployeeDao dao;
	@Autowired
	private ModelMapper modelmapper;

	@Override
	public EmployeeDto register(EmployeeDto dto) {
		EmployeePrimaryInfo map = modelmapper.map(dto, EmployeePrimaryInfo.class);
		map.getSecondaryinfo().setPrimaryinfo(map); //Setting the primaryinfo ,since it shows null
		for(EmployeeEducationalInfo i : map.getEducationalinfo()) {
			i.setPrimaryinfo(map);
		}
		
		List<EmployeeSkills> skill = new ArrayList<>();
		skill.addAll(map.getSkills());
		for(EmployeeSkills i : skill) {
			if(map.getSkills().equals(skill.get(0)));
		}
		
		dao.save(map);
		return modelmapper.map(map, EmployeeDto.class);

	}

	@Override
	public EmployeePrimaryInfo getById(LoginDto dto) {

		EmployeePrimaryInfo map = modelmapper.map(dto, EmployeePrimaryInfo.class);
		EmployeePrimaryInfo findByEmpId = dao.findByEmpId(map.getEmpId());
		if (findByEmpId != null) {
			return findByEmpId;
		}
		return null;

	}

	@Override
	public EmployeePrimaryInfo updateDetails(EmployeePrimaryInfo primaryinfo) {

		return dao.save(primaryinfo);
	}

	@Override
	public List<EmployeePrimaryInfo> getAllEmployees() {

		return dao.getAllEmployees();
	}

	@Override
	public EmployeeDto getLogin(LoginDto dto) {
		EmployeePrimaryInfo map = modelmapper.map(dto, EmployeePrimaryInfo.class);
		EmployeePrimaryInfo findByEmpId = dao.findByEmpId(map.getEmpId());
		if (findByEmpId != null) {
			if (findByEmpId.getEmpName().equalsIgnoreCase(map.getEmpName())) {
				return modelmapper.map(findByEmpId, EmployeeDto.class);
			}
		}
		return null;
	}

}